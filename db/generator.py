from DBHelper import query as sqlQuery
import os
from datetime import datetime

localTime = datetime.now()
localTime = localTime.strftime("%Y-%m-%d %H:%M:%S")

def cls():
    os.system("cls")

sql=["select TABLE_NAME name,TABLE_COMMENT comment,AUTO_INCREMENT autoIncrement FROM information_schema.tables "]
sql.append("WHERE table_schema='ilims' AND TABLE_TYPE='BASE TABLE'")
tables=sqlQuery(" ".join(sql))

def simpleType(s):
    if s in ['char','varchar','text']:
        return('char')
    elif s.endswith('int'):
        return('int')
    elif s in ['datetime','timestamp','date']:
        return 'datetime'
    elif s =='time':
        return 'time'
    elif s in ['numeric','decimal','float','double','money']:
        return 'double'
    elif s=='boolean':
        return 'boolean'
    else:
        return "char"

def getJavaType(s):
    if s in ['char','varchar','text']:
        return('String')
    elif s in ['smallint','tinyint','mediumint','int']:
        return('int')
    elif s=='bigint':
        return('long')
    elif s in ['datetime','timestamp']:
        return 'LocalDateTime'
    elif s =='date':
        return 'LocalDate'
    elif s =='time':
        return 'LocalTime'
    elif s in ['numeric','decimal','float','double','money']:
        return 'double'
    elif s=='boolean':
        return 'boolean'
    else:
        return "String"

def getObjectType(s):
    if s in ['char','varchar','text']:
        return('String')
    elif s in ['smallint','tinyint','mediumint','int']:
        return('Integer')
    elif s=='bigint':
        return('Long')
    elif s in ['datetime','timestamp']:
         return 'LocalDateTime'
    elif s =='date':
        return 'LocalDate'
    elif s =='time':
        return 'LocalTime'
    elif s in ['numeric','decimal','float','double','money']:
        return 'Double'
    elif s=='boolean':
        return 'Boolean'
    else:
        return "String"

def getFirstCaptionName(s):
    ls=list(s)
    ls[0]=ls[0].upper()
    return "".join(ls)

def hasComplexPrimaryKey(df1):
    kn=sum(df1.Key=='PRI')
    return(kn>1)


dir=f"src/domain"
tabNames=tables.name.tolist()
for tb in tabNames:
    sql=[" select column_name name,ordinal_position pos,is_NULLABLE nullable,data_type colType,column_comment comment, "]
    sql.append(f"column_key isKey FROM information_schema.columns WHERE table_name='{tb}' order by pos;")
    df=sqlQuery(" ".join(sql))
    className=getFirstCaptionName(tb)
    dtypes=df.colType.tolist()
    dtypes=[obj.decode('utf-8') for obj in dtypes]
    dtypes=[obj.split('(')[0].lower() for obj in dtypes]
    df['colType']=dtypes
    javaTypes=[getObjectType(s) for s in dtypes]
    df['javaType']=javaTypes
    row=tables.query("name==@tb")

    codes=["package com.ams.iLIMS.domain;"] ##记得修改成自己的package名
    codes.append("\n")
    codes.append("/*")
    codes.append(f"*\tgenerated by wuzhicheng@fudan.edu.cn at {localTime} ")
    #codes.append(f"*\t{row.comment}")
    codes.append("*/")

    codes.append("import com.baomidou.mybatisplus.annotation.TableName;")
    codes.append("import com.baomidou.mybatisplus.annotation.TableField;")
    codes.append("import com.baomidou.mybatisplus.annotation.TableId;")
    codes.append("import com.baomidou.mybatisplus.annotation.IdType;")
    codes.append("import jakarta.validation.constraints.*;")
    codes.append("import lombok.Data;")
    for s1 in ["LocalTime","LocalDate","LocalDateTime"]:
        if s1 in javaTypes:
            codes.append(f"import java.time.{s1};")

    codes.append("\n@Data")
    codes.append(f'@TableName("{tb}")')
    codes.append("public class %s{\n" % className)
    for index, column in df.iterrows():
        if column['isKey']=='PRI' and column['colType']=='int':
            codes.append("\t@TableId(type = IdType.AUTO)")
        if column['nullable']=="NO" and column['isKey'] !='PRI' and column["colType"] in ["char","varchar"]:
            codes.append(f"\t@NotBlank(message = \"{column['name']} 不能为空\")")

        codes.append(f"\t@TableField(\"{column['name']}\")")  
        codes.append(f"\tprivate {column['javaType']} {column['name']};\n")

    codes.append("}")

    
    if not os.path.exists(dir):
        os.makedirs(dir)

    with open(f"{dir}/{className}.java",'w') as fo:
        fo.writelines("\n".join(codes))
